name: Deploy (ZIP over FTPS) to Hostinger
'on':
  push:
    branches:
      - main
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: 'mbstring, intl, bcmath, pdo_mysql, zip'
          coverage: none
      - name: Get Composer cache dir
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: '${{ steps.composer-cache.outputs.dir }}'
          key: '${{ runner.os }}-composer-${{ hashFiles(''**/composer.lock'') }}'
          restore-keys: '${{ runner.os }}-composer-'
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: '${{ runner.os }}-npm-${{ hashFiles(''**/package-lock.json'') }}'
          restore-keys: '${{ runner.os }}-npm-'
      - name: Install PHP dependencies (Composer)
        run: composer install --no-dev --prefer-dist --optimize-autoloader
      - name: Prepare .env for build key (not deployed)
        run: |
          if [ ! -f .env ]; then cp .env.example .env; fi
          php artisan key:generate
      - name: Install & Build (Vite)
        run: |
          npm ci
          npm run build
      - name: Prepare ZIP artifact
        run: >
          set -e

          REL="$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::7}"

          echo "REL=$REL" >> $GITHUB_ENV


          rm -rf release upload

          mkdir -p release upload/releases


          rsync -a \
            --delete \
            --exclude=".git" \
            --exclude=".github" \
            --exclude="node_modules" \
            --exclude="tests" \
            --exclude="release" \
            --exclude="upload" \
            --exclude=".env" \
            --exclude="storage/logs/*" \
            --exclude="storage/framework/sessions/*" \
            --exclude="storage/framework/cache/*" \
            --exclude="storage/framework/views/*" \
            . ./release/

          # .htaccess para assets (printf)

          mkdir -p release/public/assets

          printf '%s\n' \
            'Options -Indexes' \
            '<FilesMatch "\.(php|phar|phtml)$">' \
            '  Deny from all' \
            '</FilesMatch>' \
            '<IfModule mod_headers.c>' \
            '  <FilesMatch "\.(jpg|jpeg|png|gif|webp|svg|css|js|woff2?)$">' \
            '    Header set Cache-Control "public, max-age=31536000, immutable"' \
            '    Header set Access-Control-Allow-Origin "*"' \
            '  </FilesMatch>' \
            '</IfModule>' \
            > release/public/assets/.htaccess

          # Cria o ZIP do release

          cd release

          zip -r ../upload/releases/${REL}.zip . -q

          cd ..


          # deployer.php (printf linha a linha, sem heredoc)

          mkdir -p upload

          : > upload/deployer.php

          printf '%s\n' '<?php' >> upload/deployer.php

          printf '%s\n' 'declare(strict_types=1);' >> upload/deployer.php

          printf '%s\n' '$docroot=__DIR__;' >> upload/deployer.php

          printf '%s\n' '$releases=$docroot."/releases";' >> upload/deployer.php

          printf '%s\n' '$logs=$docroot."/deploy-logs";' >> upload/deployer.php

          printf '%s\n' '$tokenFile=$docroot."/.deploy_token";' >>
          upload/deployer.php

          printf '%s\n' '@ini_set("max_execution_time","300");' >>
          upload/deployer.php

          printf '%s\n' '@ini_set("memory_limit","512M");' >>
          upload/deployer.php

          printf '%s\n' 'function
          fail($c,$m){http_response_code($c);header("Content-Type:
          application/json");echo json_encode(["ok"=>false,"error"=>$m]);exit;}'
          >> upload/deployer.php

          printf '%s\n' '$token=$_GET["token"] ?? ""; $name=$_GET["name"] ??
          "";' >> upload/deployer.php

          printf '%s\n' 'if($token==="") fail(401,"missing token");' >>
          upload/deployer.php

          printf '%s\n' 'if(!is_file($tokenFile)) fail(500,"token file
          missing");' >> upload/deployer.php

          printf '%s\n'
          'if(!hash_equals(trim((string)file_get_contents($tokenFile)),$token))
          fail(401,"invalid token");' >> upload/deployer.php

          printf '%s\n' 'if(!preg_match("/^[0-9]{14}-[a-f0-9]{7}$/",$name))
          fail(400,"invalid name format");' >> upload/deployer.php

          printf '%s\n' '@mkdir($releases,0755,true); @mkdir($logs,0755,true);'
          >> upload/deployer.php

          printf '%s\n' '$zip=$releases."/".$name.".zip";
          $target=$releases."/".$name; $current=$docroot."/current";' >>
          upload/deployer.php

          printf '%s\n' '$log=$logs."/deploy-".date("Ymd-His").".log";' >>
          upload/deployer.php

          printf '%s\n' 'file_put_contents($log,"[".date("c")."]
          ".$name."\n",FILE_APPEND);' >> upload/deployer.php

          printf '%s\n' '$z=new ZipArchive(); if($z->open($zip)!==true)
          fail(404,"zip not found");' >> upload/deployer.php

          printf '%s\n' '@mkdir($target,0755,true); if(!$z->extractTo($target))
          fail(500,"extract error"); $z->close();' >> upload/deployer.php

          printf '%s\n' 'file_put_contents($current,$name);' >>
          upload/deployer.php

          printf '%s\n' '@unlink($zip);' >> upload/deployer.php

          printf '%s\n' '$dirs=array_filter(glob($releases."/*"),"is_dir");
          usort($dirs,fn($a,$b)=>filemtime($b)<=>filemtime($a));' >>
          upload/deployer.php

          printf '%s\n' 'foreach(array_slice($dirs,5) as $d){$it=new
          RecursiveIteratorIterator(new
          RecursiveDirectoryIterator($d,FilesystemIterator::SKIP_DOTS),RecursiveIteratorIterator::CHILD_FIRST);
          foreach($it as
          $f){$f->isDir()?@rmdir($f->getPathname()):@unlink($f->getPathname());}
          @rmdir($d);}' >> upload/deployer.php

          printf '%s\n' 'header("Content-Type: application/json"); echo
          json_encode(["ok"=>true,"release"=>$name]);' >> upload/deployer.php


          # Proteção e token no docroot

          printf '%s\n' 'Options -Indexes' > upload/.htaccess

          printf '%s\n' '<Files ".deploy_token">' >> upload/.htaccess

          printf '%s\n' '  Require all denied' >> upload/.htaccess

          printf '%s\n' '</Files>' >> upload/.htaccess


          echo "${{ secrets.DEPLOY_HOOK_TOKEN }}" > upload/.deploy_token


          # index.php "ponte" no docroot (aponta para
          releases/<current>/public/index.php)

          : > upload/index.php

          printf '%s\n' '<?php' >> upload/index.php

          printf '%s\n' '$rel=@file_get_contents(__DIR__."/current");' >>
          upload/index.php

          printf '%s\n' '$rel=$rel?trim($rel):"";' >> upload/index.php

          printf '%s\n'
          'if($rel===""||!is_dir(__DIR__."/releases/".$rel."/public")){http_response_code(503);echo
          "Deploy incomplete.";exit;}' >> upload/index.php

          printf '%s\n' 'require __DIR__."/releases/".$rel."/public/index.php";'
          >> upload/index.php
      - name: Debug - local files
        run: |
          echo "ZIP gerado:"
          ls -lh upload/releases/*.zip
          echo "Arquivos no upload/:"
          find upload -maxdepth 2 -type f | sed 's/^/  /'
      - name: Upload deployer & token (docroot)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: '${{ secrets.FTP_SERVER }}'
          username: '${{ secrets.FTP_USERNAME }}'
          password: '${{ secrets.FTP_PASSWORD }}'
          protocol: ftps
          server-dir: '${{ secrets.FTP_SERVER_DIR }}/'
          local-dir: upload/
          exclude: |
            **/releases/**
            **/.git*
            **/.github/**
            **/node_modules/**
            **/.env
      - name: Upload ZIP to /releases
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: '${{ secrets.FTP_SERVER }}'
          username: '${{ secrets.FTP_USERNAME }}'
          password: '${{ secrets.FTP_PASSWORD }}'
          protocol: ftps
          server-dir: '${{ secrets.FTP_SERVER_DIR }}/releases/'
          local-dir: upload/releases/
          dangerous-clean-slate: false
          exclude: |
            **/.git*
            **/.github/**
            **/node_modules/**
            **/.env
      - name: Trigger remote deploy (unzip & activate)
        env:
          REL: '${{ env.REL }}'
        run: >
          set -e

          URL="${{ secrets.SITE_BASE_URL }}/deployer.php?token=${{
          secrets.DEPLOY_HOOK_TOKEN }}&name=${REL}"

          echo "Calling: $URL"

          curl -fsS "$URL"
